{"version":3,"sources":["Home.js","Instructions.js","Questions.js","Result.js","index.js","App.js"],"names":["Home","className","data-testid","to","Component","Instructions","state","ins","this","map","data","i","style","textAlign","marginLeft","marginRight","key","Question","questions","ques","ans","cans","id","randomNumber","quesCount","numberCheck","timeRem","allResponseCount","correctAnsCount","lifeOneChecked","lifeTwoChecked","quickestAns","slowestAns","avgTimeArr","onUnload","event","returnValue","nextHandler","e","setState","length","uncheckHandler","clearInterval","myInterval","timeHandler","arr","x","Math","floor","random","index","indexOf","splice","document","getElementById","checked","disabled","setInterval","ansHandler","target","value","lifeHandler","type","ansIndex","resultHandler","avgTimeAdd","localStorage","setItem","toFixed","window","addEventListener","Fragment","name","onClick","unchecked","pathname","Result","correctAns","wrongAns","attemptedQues","unAttemptedQues","avgTime","getItem","scope","ReactDOM","render","exact","path","component","Questions"],"mappings":"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","file":"static/js/main.d53fefad.chunk.js","sourcesContent":["//import React for creating component and {Component} for creating class component\nimport React, { Component } from \"react\";\n//App.css is imported for styling the component\nimport \"./App.css\";\n//Link is used for linking to another page\nimport { Link } from \"react-router-dom\";\n\n//Landing Page\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"App\" data-testid=\"readInstruction\">\n        <h1>Crewfoundry Welcomes You!</h1>\n        <br />\n        {/*this link will redirect you to the instructions page */}\n        <Link to=\"/instruction\">\n          <button className=\"btn btn-primary btn-lg\">\n            {\"Read Instruction\"}\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\n//exporting the component so we can import it in another file\nexport default Home;\n","//for creatinf component\nimport React, { Component } from \"react\";\n//for styling the component\nimport \"./App.css\";\n//for route to another page\nimport { Link } from \"react-router-dom\";\n\n//creating class component\nclass Instructions extends Component {\n  //state for showing all the instructions\n  state = {\n    ins: [\n      \"Threre will be total ten questions in the test.\",\n      \"Questions will be repeating after one by one.\",\n      \"Each question contains total 4 options\",\n      \"Out of those 4 options only one will be correct\",\n      \"You will have 15 seconds to answer each question.\",\n      \"The remaining time would be visible to you at the top-right\",\n      \"When the time is up for a question, that question will be considered as unanswered\",\n      \"You can move to next question by clicking on next button\",\n      \"You can not go to back to previous question\",\n      \"You will have two lifelines one is called 50/50 and another is called +10secs\",\n      \"50/50 removes two incorrect answers for current question\",\n      \"+10secs gives ten extra seconds for current question\"\n    ]\n  };\n  //render method is used to rendering the data on page\n  render() {\n    //this data will be rendered on the page\n    return (\n      <div className=\"App2\">\n        <h1>Instructions!</h1>\n        <br />\n\n        {/*\n          mapping all the instructions on the instruction page by using map method in instrucions\n          satate.\n        */}\n        {this.state.ins.map((data, i) => (\n          //defining inline styling\n          <p\n            style={{\n              textAlign: \"left\",\n              marginLeft: \"36%\",\n              marginRight: \"28%\"\n            }}\n            key={i}\n          >\n            {i + 1}. {data}\n          </p>\n        ))}\n        {/*\n          clicking on begin test button this will redirect us to questions page\n        */}\n        <Link to=\"/questions\">\n          <button className=\"btn btn-primary btn-lg\">Begin Test</button>\n        </Link>\n        <br />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\n//exorted so we can use this in different file\nexport default Instructions;\n","import React, { Component } from \"react\";\n//for giving styles to the component\nimport \"./App.css\";\n//link is used for page navigation\nimport { Link } from \"react-router-dom\";\n\n//creating class component\nclass Question extends Component {\n  state = {\n    //state of questions that is storing all the questions these ques can be more than 10\n    //here we are storing 15 questions and will pick one at a time randomly\n    //we will select questions randomly to the user\n    //ques key of state contains the question value\n    //ans key of state contains all the options of perticular question\n    //cans defines the correct answer of perticular question\n    //here I defined id of perticular question but am not using it anywhere so try to ignore it\n    questions: [\n      {\n        ques: \"Which of the following can't be done with client-side JavaScript?\",\n        ans: [\n          \"Validating a form\",\n          \"Sending a form's contents by email\",\n          \"Storing the form's contents to a database file on the server\",\n          \"Storing the form's contents to a database file on the server\"\n        ],\n        cans: 1\n      },\n      {\n        ques: \"Is it possible to link within the current page?\",\n        ans: [\"Only in framesets\", \"Yes\", \"No\", \"null\"],\n        id: 1,\n        cans: 2\n      },\n      {\n        ques: \"Which section is used for text and tags that are shown directly on your web page?\",\n        ans: [\"Head\", \"Metatags\", \"Metatags\", \"None\"],\n        id: 2,\n        cans: 1\n      },\n      {\n        ques: \"Why should you add alternative text to your images?\",\n        ans: [\n          \"In case the user wishes to load a different picture\",\n          \"So the users can get an idea of what the image is before it loads\",\n          \"So the user can save the image using the text as a name\",\n          \"None of these\"\n        ],\n        id: 3,\n        cans: 3\n      },\n      {\n        ques: \"What is the output of the following code snippet?eval(20*4)=?\",\n        ans: [\"[1,2,3]\", \"204\", \"24\", \"80\"],\n        id: 4,\n        cans: 1\n      },\n      {\n        ques: \" What is the output of the following code snippet?var a = [1,2,3,4,5]; a.slice(0,3);\",\n        ans: [\"NaN\", \"[4,5]\", \"[1,2,3,4]\", \"[1,2,3,4,5]\"],\n        id: 5,\n        cans: 0\n      },\n      {\n        ques: 'What is the correct syntax for referring to an external script called \"abc.js\"?',\n        ans: ['<script href=\" abc.js\">', '<script name=\" abc.js\">', '<script src=\" abc.js\">', \"None of the above\"],\n        id: 6,\n        cans: 3\n      },\n      {\n        ques: \"How to create a Date object in JavaScript?\",\n        ans: [\n          \"dateObjectName = new Date([parameters])\",\n          \"dateObjectName.new Date([parameters])\",\n          \"dateObjectName := new Date([parameters])\",\n          \"dateObjectName Date([parameters])\"\n        ],\n        id: 7,\n        cans: 1\n      },\n      {\n        ques: \"Which of the following is correct about features of JavaScript?\",\n        ans: [\n          \"JavaScript is a lightweight, interpreted programming language.\",\n          \"JavaScript is designed for creating network-centric applications.\",\n          \"JavaScript is complementary to and integrated with Java.\",\n          \"All of the above.\"\n        ],\n        id: 8,\n        cans: 3\n      },\n      {\n        ques: \"Which built-in method returns the character at the specified index?\",\n        ans: [\"characterAt()\", \"getCharAt()\", \"charAt()\", \"None of the above.\"],\n        id: 9,\n        cans: 2\n      },\n      {\n        ques:\n          \"Which of the following function of Boolean object returns a string of either 'true' or 'false' depending upon the value of the object?\",\n        ans: [\"toSource()\", \"toString()\", \"valueOf()\", \"None of the above.\"],\n        id: 10,\n        cans: 0\n      },\n      {\n        ques: 'var city = new Array(\"delhi\", \"agra\", \"akot\", \"aligarh\",\"palampur\");console.log(city.shift());',\n\n        ans: [\"agra\", \"akot\", \"delhi\", \"aligarh\"],\n        id: 11,\n        cans: 1\n      },\n      {\n        ques:\n          \"Which of the following function of String object extracts a section of a string and returns a new string?\",\n        ans: [\"slice()\", \"split()\", \"replace()\", \"search()\"],\n        id: 12,\n        cans: 1\n      },\n      {\n        ques:\n          \"Which of the following function of String object returns the calling string value converted to upper case?\",\n        ans: [\" toLocaleUpperCase()\", \"toUpperCase()\", \"toString()\", \"substring()\"],\n        id: 13,\n        cans: 2\n      },\n      {\n        ques:\n          \"Which of the following function of String object creates an HTML hypertext link that requests another URL?\",\n        ans: [\"link()\", \"sub()\", \"sup()\", \"small()\"],\n        id: 14,\n        cans: 3\n      }\n    ],\n    //randomNumber state will have radom number that will be generated on the click of next button\n    randomNumber: 0,\n    //quesCount state will be incread on the every next button click\n    //this state will be start from 0 and will be ended with 9\n    quesCount: 0,\n    //this state will help us in prevention of repeating of same question\n    //this is having all the elements that can be generated from 1 to 14\n    //here i m using 14 because length of the ques array will be 14\n    numberCheck: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    //this state will store remaining for perticular question\n    timeRem: 15,\n    //this state will have count of all attemped questions\n    allResponseCount: 0,\n    //will have count of all the correct answer\n    correctAnsCount: 0,\n    //boolean state for checking that 50/50 lifeline button is clicked on not\n    lifeOneChecked: false,\n    //boolean state same as 50/50 but this will be used for seconf lifelife that is +10 sec\n    lifeTwoChecked: false,\n    //this will have the time value of quicket ans in second unit\n    quickestAns: 15,\n    //this state for storing slowest and\n    slowestAns: 0,\n    //this state is of array whick will contain all the time on clicking on the options of all the questions\n    avgTimeArr: []\n  };\n\n  //this fucntoin will be executed before mounting of the component\n  componentWillMount() {\n    //this will add event listener to the global object 'window'\n    //this event will be executed before getting page refresh\n    //before coming back to refresh state to unload state 'onUnload' function will be executed\n    window.addEventListener(\"beforeunload\", this.onUnload);\n  }\n\n  //this function will be executed after mouting of the component\n  componentDidMount() {\n    //when question displays to the use this timeHandler funciton will start the timet which will be started from 15 secs\n    this.timeHandler();\n  }\n  //this fuction will be excuted before coming back to normal state from refreshing of the page\n  onUnload = event => {\n    event.returnValue = \"Changes that you made may not be saved.\";\n  };\n\n  //this arrow fuction will handle functionality of next button click\n  nextHandler = e => {\n    //this will update the state of array which is having all the time values of response time for each question\n    //it will also update count of all responded questions\n    this.setState({\n      avgTimeArr: this.state.avgTimeArr,\n      allResponseCount: this.state.avgTimeArr.length\n    });\n    //uncheckHandler handler function will be called on every next button click\n    this.uncheckHandler();\n    //clearInterval method will clear all the time that seted before\n    clearInterval(this.myInterval);\n    //timeHandler is needed for counter in next question\n    this.timeHandler();\n    //assining state of aray to temporary variable\n    let arr = this.state.numberCheck;\n    //this will generate a random number from 1 to length of the numberCheck state\n    let x = this.state.numberCheck[Math.floor(Math.random() * this.state.numberCheck.length)];\n    //this will find the index of the generated random number in temp array...this index will be stored in index variable\n    let index = arr.indexOf(x);\n    //splice method is used to remove the perticular index element from temp arr\n    arr.splice(index, 1);\n    //after removing element we are updateing states\n    this.setState({\n      //randomNumbder is useful for getting index of the questions state\n      //we are updating it with generated random number x\n      randomNumber: x,\n      //increasing the question count by one\n      quesCount: this.state.quesCount + 1,\n      //updating numberCheck array with temp arr array\n      numberCheck: arr\n    });\n  };\n\n  //this function is used  for input radion box to get radio boxes without selected\n  //this is removing selected option of last question\n  uncheckHandler = () => {\n    //this will be applied if quesCount is less than 9\n    if (this.state.quesCount <= 9) {\n      //iterating 4 time beacause we have four four options\n      for (let i = 0; i < 4; i++) {\n        //it will removed auto checked state of options\n        document.getElementById(i).checked = false;\n        //it will enable all the options again if there is any disabled radio box\n        document.getElementById(i).disabled = false;\n      }\n    }\n  };\n\n  //this function is useful for handling the time counter for every question\n  timeHandler = () => {\n    //this codition prevent to execute this function data\n    //if questionCount is more than 9 then it will retrun nothing other it will do whatever is written in the code\n    if (this.state.quesCount >= 9) return;\n    //initially it will set the state of time reamaining to 15 secs\n    this.setState(\n      {\n        timeRem: 15\n      },\n      () => {\n        {\n          //setInterval method will be exected after every second\n          //beacuse we are defining 1000ms as seond argument of the funcation\n          this.myInterval = setInterval(() => {\n            //after every second we will decrease the remaining time by 1 sec\n            this.setState(\n              {\n                timeRem: this.state.timeRem - 1\n              },\n              () => {\n                //if remaining time is equal to 0 then next button will automatically clicked\n                if (this.state.timeRem == 0) {\n                  this.nextHandler();\n                }\n              }\n            );\n          }, 1000);\n        }\n      }\n    );\n  };\n\n  //this is trigged on every option selection\n  ansHandler = event => {\n    //this condition is useful to get the quickest time of giving response\n    if (15 - this.state.timeRem < this.state.quickestAns) {\n      this.setState({\n        quickestAns: 15 - this.state.timeRem\n      });\n    }\n    //this condition is useful to get the slowest time of response\n    if (this.state.slowestAns < 15 - this.state.timeRem) {\n      this.setState({\n        slowestAns: 15 - this.state.timeRem\n      });\n    }\n    //pushing time of respoonse in the avg time state\n    this.state.avgTimeArr.splice(this.state.quesCount, 1, 15 - this.state.timeRem);\n    //this variable will get value from 0-3 that deifins the selected option by user\n    let userAns = event.target.value;\n    //this is getting correct ans of displaying question from questions state aray\n    let correctAns = this.state.questions[this.state.randomNumber].cans;\n    //checking that selected option by user correct or not\n    if (userAns == correctAns) {\n      //if\n      this.setState({\n        correctAnsCount: this.state.correctAnsCount + 1\n      });\n    }\n  };\n\n  //this is usful for handling the lifelines\n  lifeHandler = (event, type) => {\n    //if 50/50 lifline button is clicked then this will be executed\n    if (type === \"50/50\") {\n      //getting the correct ans of displaying question\n      let ansIndex = this.state.questions[this.state.randomNumber].cans;\n      //creating temp array\n      let arr = [0, 1, 2, 3];\n      //it will get index of correct and from temporary array\n      let index = arr.indexOf(ansIndex);\n      //that index will be removed by using this method\n      arr.splice(index, 1);\n      //this loop will disable two options other than correct option\n      for (let i = 0; i < 2; i++) {\n        document.getElementById(arr[i]).disabled = true;\n      }\n      //it will help us to checke that first lifeline is used\n      this.setState({\n        lifeOneChecked: true\n      });\n    }\n    //if second lifelined is clicked then this condition will be executed\n    else {\n      this.setState({\n        //will help us to identify that second lifeline is selected\n        lifeTwoChecked: true,\n        //this will add 10 more seconds to the remaining time\n        timeRem: this.state.timeRem + 10\n      });\n    }\n  };\n\n  //this function will be called when user clicks on 'Get Your Result' button\n  resultHandler = () => {\n    //avgTimeAdd varible will have summation of all the response time of all questions\n    let avgTimeAdd = 0;\n    //this will iterate loop on the length of avgTimeArray state to get sum of all responses\n    for (let i = 0; i < this.state.avgTimeArr.length; i++) {\n      avgTimeAdd = avgTimeAdd + this.state.avgTimeArr[i];\n    }\n    //setting localstorage for result...localstorage is same as cookies\n    localStorage.setItem(\"attemptedQues\", this.state.allResponseCount);\n    localStorage.setItem(\"correctAns\", this.state.correctAnsCount);\n    localStorage.setItem(\"wrongAns\", this.state.allResponseCount - this.state.correctAnsCount);\n    localStorage.setItem(\"unAttemptedQues\", 10 - this.state.allResponseCount);\n    localStorage.setItem(\"quickestAns\", this.state.quickestAns);\n    localStorage.setItem(\"slowestAns\", this.state.slowestAns);\n    localStorage.setItem(\"avgTime\", (avgTimeAdd / this.state.avgTimeArr.length).toFixed(2));\n  };\n\n  render() {\n    //on rendering we are disbling the lifeline button after checking that which lifeline is selected\n    if (this.state.quesCount <= 9 && this.state.lifeOneChecked) {\n      document.getElementById(\"lifeone\").disabled = true;\n    }\n    if (this.state.quesCount <= 9 && this.state.lifeTwoChecked) {\n      document.getElementById(\"lifetwo\").disabled = true;\n    }\n    const { timeRem } = this.state;\n    return (\n      <React.Fragment>\n        {this.state.quesCount <= 9 ? (\n          <React.Fragment>\n            <div className=\"row\">\n              <div className=\"col-4\"></div>\n              <div className=\"col-8 \">\n                <h4 className=\"Time1\">Time Left : {timeRem} Secs</h4>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <div className=\"Questions\">\n                  <p>\n                    <b>\n                      Ques\n                      {this.state.quesCount + 1}.\n                    </b>{\" \"}\n                    {this.state.questions[this.state.randomNumber].ques}\n                  </p>\n                  <input type=\"radio\" id=\"0\" name=\"ans\" value=\"0\" onClick={e => this.ansHandler(e)} unchecked /> (A){\" \"}\n                  {this.state.questions[this.state.randomNumber].ans[0]}\n                  <br />\n                  <input\n                    type=\"radio\"\n                    id=\"1\"\n                    name=\"ans\"\n                    value=\"1\"\n                    onClick={e => this.ansHandler(e)}\n                    unchecked\n                  /> (B) {this.state.questions[this.state.randomNumber].ans[1]} <br />\n                  <input\n                    type=\"radio\"\n                    id=\"2\"\n                    name=\"ans\"\n                    value=\"2\"\n                    onClick={e => this.ansHandler(e)}\n                    unchecked\n                  /> (C) {this.state.questions[this.state.randomNumber].ans[2]}\n                  <br />\n                  <input\n                    type=\"radio\"\n                    id=\"3\"\n                    name=\"ans\"\n                    value=\"3\"\n                    onClick={e => this.ansHandler(e)}\n                    unchecked\n                  /> (D) {this.state.questions[this.state.randomNumber].ans[3]}\n                  <br />\n                </div>\n              </div>\n            </div>\n            <br />\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <button className=\"btn btn-primary ButtonTwo\" onClick={e => this.nextHandler(e)}>\n                  Next\n                </button>\n              </div>\n            </div>\n            <br />\n            <div className=\"row\">\n              <div className=\"lifeline\">\n                <h3 className=\"lifelabel\">Lifelines</h3>\n                <button className=\"btn btn-primary\" id=\"lifeone\" onClick={e => this.lifeHandler(e, \"50/50\")}>\n                  50/50\n                </button>\n                &nbsp;&nbsp;\n                <button className=\"btn btn-primary\" id=\"lifetwo\" onClick={e => this.lifeHandler(e, \"10sec\")}>\n                  +10 Secs\n                </button>\n              </div>\n            </div>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <div className=\"Result\">\n                  <h1>Thanks For Giving Test</h1>\n                  <br />\n                  <Link\n                    to={{\n                      pathname: \"/result\"\n                    }}\n                  >\n                    <button className=\"btn btn-primary\" onClick={this.resultHandler}>\n                      Get Your Result\n                    </button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Question;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass Result extends Component {\n  state = {\n    correctAns: 0,\n    wrongAns: 0,\n    attemptedQues: 0,\n    unAttemptedQues: 0,\n    quickestAns: \"N/A\",\n    slowestAns: \"N/A\",\n    avgTime: 15\n  };\n  componentDidMount() {\n    //updating states on mounting of the component by getting values from localstorage\n    this.setState({\n      attemptedQues: localStorage.getItem(\"attemptedQues\"),\n      correctAns: localStorage.getItem(\"correctAns\"),\n      wrongAns: localStorage.getItem(\"wrongAns\"),\n      unAttemptedQues: localStorage.getItem(\"unAttemptedQues\"),\n      quickestAns: localStorage.getItem(\"quickestAns\"),\n      slowestAns: localStorage.getItem(\"slowestAns\"),\n      avgTime: localStorage.getItem(\"avgTime\")\n    });\n  }\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\"></div>\n        <div className=\"col-6\">\n          <div className=\"App\">\n            <h4>Your Result</h4>\n            <table className=\"table\">\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">Description</th>\n                  <th scope=\"col\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Attempted Question</td>\n                  <td>{this.state.attemptedQues}</td>\n                </tr>\n                <tr>\n                  <td>Un-Attempted Question</td>\n                  <td>{this.state.unAttemptedQues}</td>\n                </tr>\n                <tr>\n                  <td>Total Correct Answer</td>\n                  <td>{this.state.correctAns}</td>\n                </tr>\n                <tr>\n                  <td>Total Wrong Answer</td>\n                  <td>{this.state.wrongAns}</td>\n                </tr>\n                <tr>\n                  <td>Quickest Answer</td>\n                  <td>{this.state.attemptedQues > 0 ? this.state.quickestAns + \" Sec\" : <span>N/A</span>}</td>\n                </tr>\n                <tr>\n                  <td>Slowest Answer</td>\n                  <td>{this.state.attemptedQues > 0 ? this.state.slowestAns + \" Sec\" : <span>N/A</span>}</td>\n                </tr>\n                <tr>\n                  <td>Average Time Per Question</td>\n                  <td>{this.state.attemptedQues > 0 ? this.state.avgTime + \" Sec\" : <span>N/A</span>}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <div className=\"col-3\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","import React from \"react\";\n//ReactDOM for rendering the component\nimport ReactDOM from \"react-dom\";\n//importing main file of the task that is App.js\nimport App from \"./App\";\n//using bootstrap\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\n//rendering App component to root id elemt of main html file\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\n//for routing\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n//for routing to home page we are importing Home.js file\nimport Home from \"./Home\";\n//for routing to instructions page\nimport Instructions from \"./Instructions\";\n//for routing to questions page\nimport Questions from \"./Questions\";\n//for routing to result page\nimport Result from \"./Result\";\n\n//creating functional component beacause there is no need of states\n//we are exporting this compent this component here itself\nexport default function App() {\n  return (\n    //router is useful for definf routing\n    <Router>\n      <div>\n        {/* if path is exactly / then it will load Home.js page data\n          if path is /instruction then it will load Instruction.js page data\n          if path is /questions then it will load Questions.js page data\n          if path is /result then it will load Result.js page data \n      */}\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/instruction\" component={Instructions} />\n        <Route path=\"/questions\" component={Questions} />\n        <Route path=\"/result\" component={Result} />\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}